---
version: "3.8"
services:
  app:
    container_name: app
    build:
      context: .
      dockerfile: dev.Dockerfile
    command: bash -c "sleep 5 && cd /project && poetry run alembic upgrade head && poetry run python3 app/main.py"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - devNet

  db:
    image: postgres:14
    restart: always
    container_name: postgres
    expose:
      - 5432
    ports:
      - "6500:5432"
    environment:
      PGUSER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_USER: user
      POSTGRES_DB: postgres
    volumes:
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -h postgres"
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - devNet

  worker:
    container_name: worker
    build:
      context: .
      dockerfile: dev.Dockerfile
    command: bash -c "cd /project && poetry run celery -A app.internal.tasks.worker:celery worker --loglevel=info"
    environment:
      PYTHONPATH: "/project/app"
    expose:
      - 6380
    ports:
      - "6380:6380"
    depends_on:
      - redis
    networks:
      - devNet

  flower:
    container_name: flower
    build:
      context: .
      dockerfile: dev.Dockerfile
    command: bash -c "cd /project && poetry run celery -A app.internal.tasks.worker:celery flower"
    environment:
      PYTHONPATH: "/project/app"
    expose:
      - 5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - devNet

  redis:
    container_name: redis
    image: redis:7
    expose:
      - 6379
    ports:
      - "6379:6379"
    networks:
      - devNet

volumes:
  postgres-db:

networks:
  devNet:
